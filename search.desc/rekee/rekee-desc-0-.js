searchState.loadedDescShard("rekee", 0, "Library providing track editor functions for the Rekee web …\nPrints a debug message to the log output.\nSet of tiles that belong to the same game edition (core …\nUtilitiy functions for map image export.\nTypes and methods for working with a hexagon grid.\nImport and export of map data.\nPrints an info message to the log output.\nPrints a generic message to the log output.\nMap of tiles within a hexagon grid.\nTile identifier and characteristics.\nCreates a new tile identifier.\nToken which can be added to tiles. Can be used to add …\nPrints a warning message to the log output.\nRallyman: DIRT\n110% expansion for Rallyman: DIRT\nClimb expansion for Rallyman: DIRT\nCopilot Pack expansion for Rallyman: DIRT\nRallyman: DIRT core box\nRX expansion for Rallyman: DIRT\nRallyman game edition (core box or one of the expansions).\nRallyman: GT\nAdrenaline Pack expansion for Rallyman: GT\nChampionship expansion for Rallyman: GT\nRallyman: GT core box\nTeam Challenge expansion for Rallyman: GT\nWorld Tour expansion for Rallyman: GT\nRallyman game series (GT or DIRT).\nReturns all the tiles of the game joined into a sorted …\nCheck whether the edition matches a given base tile …\nCheck whether the edition contains a specific tile.\nCheck whether the edition contains a specific token.\nReturns tiles part of Rallyman: DIRT game editions joined …\nIterator over the editions of the game series.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns tiles part of Rallyman: GT game editions joined …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the edition is a stand-alone game, or an …\nIterator over all game editions.\nIterator over all game series.\nGame series that the edition belongs to.\nReturns the tiles of a specific game edition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDirection of the positive <code>q</code> axis.\nDirection of the positive <code>r</code> axis.\nDirection of the positive <code>s</code> axis.\nCoordinate within a hexagon grid.\nDirection of the negative <code>q</code> axis.\nDirection within a hexagon grid.\nDirection of the negative <code>r</code> axis.\nDirection of the negative <code>s</code> axis.\nFloating-point variant of a grid <code>Coordinate</code>.\nFloating-point variant of a hexagon <code>Direction</code>.\nCoefficients for converting between hexagonal grid …\nHexagon orientation coefficients.\nPosition within a grid of rectangular pixels.\nRectangle area within a grid of rectangular pixels. It …\nBottom position of the rectangle.\nBottom-right corner of the rectangle.\nCenter point of the rectangle.\nConvert an angle in degrees into a hexagon grid direction.\nConvert a hexagon grid direction into an angle in degrees.\nFlat topped orientation, hexagons are aligned in vertical …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a hexagon grid direction from an angle in degrees.\nConvert x/y pixel positions into a floating-point grid …\nConvert x/y pixel positions back into a hexagon grid …\nCalculates the corners of a hexagon with the given …\nCalculates the rectangular box of a hexagon with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the hexagon orientation is “flat top” …\nReturns whether the hexagon orientation is “pointy top”…\nIterator over all six directions.\nGet adjacent grid coordinate based on the given direction.\nCreates a new grid coordinate from positions on <code>q</code> and <code>r</code> …\nCreates a new floating-point grid coordinate from …\nCreates a new rectangle from the <code>left</code>, <code>top</code>, <code>width</code> and …\nCreates a new grid layout, consisting of hexagon …\nGet opposite direction (point reflection).\nReturns a reference to the grid orientation parameters.\nReturns the grid origin point.\nPointy topped orientation, hexagons are aligned in …\nCoordinate position on <code>q</code> axis.\nCoordinate position on <code>r</code> axis.\nRight position of the rectangle.\nRotate this hexagon grid coordinate by the given …\nGet coordinate rotated left (counter-clockwise) by 60° …\nGet direction rotated left (counter-clockwise).\nGet coordinate rotated right (clockwise) by 60° around …\nGet direction rotated right (clockwise).\nCoordinate position on <code>s</code> axis.\nReturns the hexagon size of this grid layout.\nConvert this hexagon grid direction into an angle in …\nConvert this hexagon grid direction into an angle in …\nConvert this floating-point grid coordinate into the …\nConvert this hexagon grid coordinate into x/y pixel …\nConvert this floating-point grid coordinate into x/y pixel …\nTop-left corner of the rectangle.\nCalculates the union of two rectangles, the smallest …\nCreates a copy of this layout with new grid orientation …\nCreates a copy of this layout with new grid origin point.\nCreates a new rectangle from the existing one by adding a …\nCreates a copy of this layout with new hexagon size …\nPosition on the <code>x</code> axis.\nPosition on the <code>y</code> axis.\nHelper function to generate a valid filename from a (map …\nExport map data in native Rekee format.\nExport map data in RGT format.\nReturns the argument unchanged.\nImport map data with format auto-detection.\nImport map data in native Rekee format.\nImport map data in RGT format.\nCalls <code>U::from(self)</code>.\nEdition, tile count and token count information for a …\nMap for storing track tiles.\nSingle tile that is part of the map. A placed tile …\nActive direction for the next tile <code>append</code> action.\nActive position for the next tile <code>append</code> action. Returns …\nAdds a token to the tile at the given position.\nRe-align all tiles around the map center.\nAppend a new tile to the map using the active position. In …\nMap author\nDanger level information for a tile.\nReturns a summary about the editions that are necessary to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns tile at the given map position, if existing.\nCheck whether the tile has tokens placed on it.\nTile identifier.\nInsert a new tile using the specified position and …\nInsert a new tile using the specified position and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new tile with identifier, coordinates, and …\nCreates a new token with identifier, coordinates, and …\nCreates a new and empty map.\nPacenote information for a tile.\nRemove tile at the given position.\nRotate all tile positions to the left (counter-clockwise).\nRotate all tile positions to the right (clockwise).\nUpdate position for the next tile <code>append</code> action.\nUpdates the map author.\nUpdates the map title.\nTerrain information for a tile.\nList of all tiles placed on the map.\nMap title.\nUpdates all tokens of the tile at the given position.\nCreates a new tile with identifier, coordinates, rotation, …\nTile has asphalt terrain surface.\nTrack space with chicane.\nTrack spaces connected by ascend or descend arrows.\nTile with cloud modifier token.\nInternal tile connection information. Describes how a …\nTile connection hint. Used to describe the orientation of …\nDanger level information for a tile.\nTile count information for a specific terrain danger level.\nExternal tile edge information. Describes how the track …\nEdition and tile count information for a specific edition.\nTile has gravel terrain surface.\nAn iterator that yields the danger levels that are …\nAn iterator that yields the editions that are necessary to …\nAn iterator that yields the terrain surfaces that are …\nTrack space with automatic hazard.\nTile has danger level high (red).\nTrack space with a jump.\nTrack space with speed limit.\nTrack space with speed limit and hazard.\nTile has danger level low (yellow).\nTile has danger level medium (orange).\nTile with shortcut mud spray token.\nTile has no danger level assigned.\nTile has no terrain surface assigned.\nTile with oxygen modifier token.\nShortcut track space with speed limit.\nTile has snow terrain surface.\nTerrain surface information for a tile.\nTile count information for a specific terrain surface.\nIdentifier of a game tile.\nInformation about tile characteristics like graphical …\nUtilitiy methods on any list of <code>TileId</code>s.\nCount information for a specific base tile.\nTrack space with water.\nReturns the “base” identifier of a game tile. This is …\nBase identifier of the corresponding game tile.\nConnection information for one of the six directions of a …\nConnection target direction for one of the six directions …\nNumber of graphical variants that are available for a tile.\nDanger level information for a tile.\nReturns a summary about the danger levels that occur …\nDetects whether the given list of tiles belongs to the …\nEdge informantion for one of the six directions of a tile.\nReturns a summary about the editions that are necessary to …\nList of editions which contain this tile.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFull identifier of the corresponding game tile. If the …\nLookup tile information by tile identifier. The identifier …\nReturns an iterator over the danger levels that occur in …\nReturns an iterator over the editions that are necessary …\nReturns an iterator over the terrain surfaces that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an interator over all tiles in the internal list.\nLane count of the tile edge.\nCreates a new tile identifier from catalog number, tile …\nTile catalog number.\nPacenote information for a tile.\nSeries information for a tile.\nTile side (1 =&gt; front / a, 2 =&gt; back / b).\nTerrain information for a tile.\nReturns a summary about the terrain surfaces that occur …\nReturns a summary about the tiles that are necessary to …\nReturns the subset of tiles that are part of the current …\nReturns the subset of tiles that belong to the current …\nReturns the subset of tiles that share the same danger …\nGraphical tile variant.\nChicane token without a speed limit, part of the Rallyman …\nChicane token with a speed limit, part of the Rallyman …\nAscent tile modifier, part of the Climb expansion for …\nDescent tile modifier, part of the Climb expansion for …\nCloud tile modifier, part of the Climb expansion for …\nEdition and token count information for a specific edition.\nFinishing line arch, part of the RX expansion for Rallyman …\nJoker entrance arch, part of the RX expansion for Rallyman …\nJoker exit arch, part of the RX expansion for Rallyman …\nJump token, part of the Rallyman DIRT Copilot Pack.\nShortcut mud spray, part of the Rallyman DIRT core box.\nOxygen tile modifier, part of the Climb expansion for …\nIdentifier for a token which can be placed on tiles.\nUtility methods on any list of <code>TokenId</code>s.\nCount information for a specific base token.\nWater token, part of the Rallyman DIRT Copilot Pack.\nCreates a copy of the current token without terrain info …\nEdition that this token belongs to.\nReturns a summary about the editions that are necessary to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator over all track tokens.\nReturns a summary about the tokens that are contained …\nCreates a copy of the current token with inner terrain …")